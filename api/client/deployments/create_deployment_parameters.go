package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"os"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateDeploymentParams creates a new CreateDeploymentParams object
// with the default values initialized.
func NewCreateDeploymentParams() *CreateDeploymentParams {
	var ()
	return &CreateDeploymentParams{}
}

/*CreateDeploymentParams contains all the parameters to send to the API endpoint
for the create deployment operation typically these are written to a http.Request
*/
type CreateDeploymentParams struct {

	/*AppTarball*/
	AppTarball os.File
	/*AppID
	  App ID

	*/
	AppID int64
	/*Description*/
	Description *string
	/*TeamID
	  Team ID

	*/
	TeamID int64
}

// WithAppTarball adds the appTarball to the create deployment params
func (o *CreateDeploymentParams) WithAppTarball(AppTarball os.File) *CreateDeploymentParams {
	o.AppTarball = AppTarball
	return o
}

// WithAppID adds the appId to the create deployment params
func (o *CreateDeploymentParams) WithAppID(AppID int64) *CreateDeploymentParams {
	o.AppID = AppID
	return o
}

// WithDescription adds the description to the create deployment params
func (o *CreateDeploymentParams) WithDescription(Description *string) *CreateDeploymentParams {
	o.Description = Description
	return o
}

// WithTeamID adds the teamId to the create deployment params
func (o *CreateDeploymentParams) WithTeamID(TeamID int64) *CreateDeploymentParams {
	o.TeamID = TeamID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateDeploymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	// form file param appTarball
	if err := r.SetFileParam("appTarball", &o.AppTarball); err != nil {
		return err
	}

	// path param app_id
	if err := r.SetPathParam("app_id", swag.FormatInt64(o.AppID)); err != nil {
		return err
	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	// path param team_id
	if err := r.SetPathParam("team_id", swag.FormatInt64(o.TeamID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

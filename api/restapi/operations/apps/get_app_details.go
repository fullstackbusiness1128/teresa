package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAppDetailsHandlerFunc turns a function with the right signature into a get app details handler
type GetAppDetailsHandlerFunc func(GetAppDetailsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAppDetailsHandlerFunc) Handle(params GetAppDetailsParams) middleware.Responder {
	return fn(params)
}

// GetAppDetailsHandler interface for that can handle valid get app details params
type GetAppDetailsHandler interface {
	Handle(GetAppDetailsParams) middleware.Responder
}

// NewGetAppDetails creates a new http.Handler for the get app details operation
func NewGetAppDetails(ctx *middleware.Context, handler GetAppDetailsHandler) *GetAppDetails {
	return &GetAppDetails{Context: ctx, Handler: handler}
}

/*GetAppDetails swagger:route GET /teams/{team_id}/apps/{app_id} apps getAppDetails

Get app details

Get app details

*/
type GetAppDetails struct {
	Context *middleware.Context
	Handler GetAppDetailsHandler
}

func (o *GetAppDetails) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAppDetailsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

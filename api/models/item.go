package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Item item

swagger:model item
*/
type Item struct {

	/* app name

	Required: true
	Min Length: 5
	*/
	AppName *string `json:"app_name"`

	/* name

	Required: true
	Min Length: 5
	*/
	Name *string `json:"name"`

	/* replicas
	 */
	Replicas *float64 `json:"replicas,omitempty"`

	/* team

	Required: true
	Min Length: 3
	*/
	Team *string `json:"team"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("app_name", "body", m.AppName); err != nil {
		return err
	}

	if err := validate.MinLength("app_name", "body", string(*m.AppName), 5); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateTeam(formats strfmt.Registry) error {

	if err := validate.Required("team", "body", m.Team); err != nil {
		return err
	}

	if err := validate.MinLength("team", "body", string(*m.Team), 3); err != nil {
		return err
	}

	return nil
}

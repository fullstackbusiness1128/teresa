package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Deployment deployment

swagger:model Deployment
*/
type Deployment struct {

	/* description

	Required: true
	*/
	Description *string `json:"description"`

	/* description of the error, if any
	 */
	Error string `json:"error,omitempty"`

	/* where the deploy process was started
	 */
	Origin *string `json:"origin,omitempty"`

	/* uuid

	Required: true
	*/
	UUID *string `json:"uuid"`

	/* when
	 */
	When strfmt.DateTime `json:"when,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var deploymentTypeOriginPropEnum []interface{}

// prop value enum
func (m *Deployment) validateOriginEnum(path, location string, value string) error {
	if deploymentTypeOriginPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["cli_app_deploy","git","ci"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			deploymentTypeOriginPropEnum = append(deploymentTypeOriginPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, deploymentTypeOriginPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	// value enum
	if err := m.validateOriginEnum("origin", "body", *m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}
